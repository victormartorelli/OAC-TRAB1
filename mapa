.data
	memoria2: .word 270794752
	memoria: .word 269746176#Endereco de memoria final do bloco exibido no bitmap display
	largura: .word 2048#tamanho da largura para auxiliar na leitura invertida da imagem 0 a 511
	screen_size: .word 262144#512x512 representa a quantidade de bytes existentes no bitmap display
	buffer: .word 0 #buffer utilizado pelo mips na leitura do arquivo
	nome_da_imagem: .asciiz "img.bmp"
	mensagem_erro_ao_abrir_imagem: .asciiz "Nao foi possivel abrir a imgem.Verifique se ela se encontra no mesmo diretorio que o executavel do mars"
	mensagem_blur: .asciiz "1 - Aplicar blur"
	mensagem_blur2: .asciiz "Escolha a intensidade do blur 1-5 * Quanto maior a intensidade, mais demorado"
	mensagem_edge: .asciiz "2 - Aplicar edge extractor"
	mensagem_binarizacao: .asciiz "3 - Aplicar Binarizacao por limiar"
	mensagem_binarizacao2: .asciiz "3 - Digite o valor a ser usado como limiar - Threshold entre 0 - 255. limiar>pixel -> white , limiar<=pixel ->black"
	mensagem_reset: .asciiz "4 - Resetar Imagem"
	mensagem_sair: .asciiz "9 - Sair"
	mensagem_voltar: .asciiz "9 - Voltar"
	quebra_de_linha: .asciiz "\n"
	efeito: .asciiz "Aplicando o efeito.Aguarde"
	espaco: .asciiz " "
.text

main:

lw $s0,memoria2 #endereço base do heap
lw $s3,memoria #endereço base do heap
lw $s1,screen_size#Tamanho de bytes do display
sub $s0,$s0,72 #desconta do endereco inicial do heap a quantidade de bytes utiliza para header
sub $s3,$s3,72 #desconta do endereco inicial do heap a quantidade de bytes utiliza para header
lw $t2,largura#variavel que identifica a base da lateral esquerda de cada linha
lw $t3,largura #tamanho da largura que servira de contagem de uma lateral a outra
jal abre_imagem
j image_prep
jal menu



menu:
li $v0,4
la $a0,mensagem_blur
syscall

la $a0,quebra_de_linha
syscall

li $v0,4
la $a0,mensagem_edge
syscall

la $a0,quebra_de_linha
syscall

li $v0,4
la $a0,mensagem_binarizacao
syscall

la $a0,quebra_de_linha
syscall

li $v0,4
la $a0,mensagem_reset
syscall

la $a0,quebra_de_linha
syscall

li $v0,4
la $a0,mensagem_sair
syscall

la $a0,quebra_de_linha
syscall

li $v0,4
syscall

li $v0,5 #Pega o imput do usuario
syscall 
beq $v0,1,menu_blur
beq $v0,3,binarizacao_prep
beq $v0,4,image_prep
beq $v0,9,quit
bne $v0,9,menu

binarizacao_prep: #Preparacao de variaveis para chamar a funcao de binarizacao

li $v0,4
la $a0,mensagem_binarizacao2
syscall

la $a0,quebra_de_linha
syscall

li $v0,5 #Pega o imput do usuario
syscall
add $t6,$v0,$zero
lw $a3 ,memoria# a1 contem o endereco do heap que sera visto em tela
lw $a2 ,memoria2# a2 contem o endereco do heap no qual a imagem original esta localizada
lw $t5,screen_size #a3 contem o numero de bits a serem lidos
j binarizacao


binarizacao:

la $t0,buffer #T0 recebe o endereco da variavel usada como buffer


lbu $t1,0($a3)#Pixel Azul
lbu $t2,-1($a3)#Pixel inutilizado
lbu $t3,-2($a3)#Pixel vermelho
lbu $t4,-3($a3)#Pixel verde

add $t1,$t1,$t2
add $t1,$t1,$t3
add $t1,$t1,$t4 # t1 = t1+t2+t3+t4
div $t1,$t1,4

bge $t1,$t6,to_black
blt $t1,$t6,to_white
continue:



sb $t1,0($t0)
sb $t1,3($t0)
sb $t1,2($t0)
sb $t1,1($t0)


lw $t0,buffer
sw $t0,0($a3)
addi $a3,$a3,-4 #Decrementa para o prox pixel
addi $t5,$t5,-1 # Numero de vezes que o loop sera executado
beq $t5,$zero,menu
j binarizacao

to_black:
addi $t1,$zero,0
j continue

to_white:
addi $t1,$zero,255
j continue

image_prep:

lw $a1,memoria#onde a imagem aparece
lw $a2,memoria2#local na memoria em que a imagem e modificada antes de ser mandada para a tela
lw $a3,screen_size
j image_reset

image_reset:

lw $t1,0($a2)
sw $t1,0($a1)
addi $a1,$a1,-4
addi $a2,$a2,-4
addi $a3,$a3,-1
beq $a3,0,menu
j image_reset


menu_blur:
li $v0,4
la $a0,mensagem_blur2
syscall

la $a0,quebra_de_linha
syscall

li $v0,5 #Pega o imput do usuario
syscall
addi $a3,$v0,1

jal prepara_blur


j menu


prepara_blur:
#Prepara blur

move $t6,$s3 #copia s0 pra a1.Agora a1 contem o endereco base do heap
lw $t7,screen_size #t2 contem o numero de bits a serem lidos
addi $a3,$a3,-1 # Numero de vezes que a intensidade obriga a funcao a se repetir

li $v0,4
la $a0,efeito 
syscall

li $v0,4
la $a0,espaco
syscall

li $v0,1
add $a0,$zero,$a3
syscall

li $v0,4
la $a0,quebra_de_linha
syscall


bgt $a3,0,blur


jr $ra


######################3
blur: 


la $t0,buffer #T0 recebe o endereco da variavel usada como buffer

#### Pixels Azuis

lbu $t1,0($t6)#Pixel central
lbu $t2,4($t6)#Pixel a direita
add $t1,$t1,$t2

lbu $t2,8($t6)#Pixel a direita 2
add $t1,$t1,$t2

lbu $t3,-4($t6)#Pixel a esquerda
add $t1,$t1,$t3

lbu $t3,-8($t6)#Pixel a esquerda 2
add $t1,$t1,$t3

lbu $t4,2048($t6)#Pixel de baixo
add $t1,$t1,$t4

lbu $t5,-2048($t6)#Pixel de cima
add $t1,$t1,$t5 # t1= t1+t2+T3+t4+t5...+..

div $t1,$t1,7 	#t1 = t1/7 , Cauculando a media dos valores dos pixels
sb $t1,0($t0)	# Armazena o valor encontrado no lugar buffer para depois subistituir a word antiga

####################3 Indiferente, esse byte é inutil mas deve ser lido

lbu $t1,-1($t6)
lbu $t2,3($t6)
add $t1,$t1,$t2

lbu $t2,7($t6)
add $t1,$t1,$t2


lbu $t3,-5($t6)
add $t1,$t1,$t3

lbu $t3,-9($t6)
add $t1,$t1,$t3

lbu $t4,2047($t6)
add $t1 $t1,$t4

lbu $t5,-2049($t6)
add $t1 $t1,$t5

div $t1,$t1,7
sb $t1,3($t0)

##Vermelho

lbu $t1,-2($t6)
lbu $t2,2($t6)
add $t1,$t1,$t2

lbu $t2,6($t6)
add $t1,$t1,$t2

lbu $t3,-6($t6)
add $t1,$t1,$t3

lbu $t3,-10($t6)
add $t1,$t1,$t3

lbu $t4,2046($t6)
add $t1 $t1,$t4

lbu $t5,-2050($t6)
add $t1 $t1,$t5

div $t1,$t1,7
sb $t1,2($t0)

## Verde

lbu $t1,-3($t6)
lbu $t2,1($t6)
add $t1,$t1,$t2

lbu $t2,5($t6)
add $t1,$t1,$t2

lbu $t3,-7($t6)
add $t1,$t1,$t3

lbu $t3,-11($t6)
add $t1,$t1,$t3

lbu $t4,2045($t6)
add $t1 $t1,$t4

lbu $t5,-2051($t6)
add $t1 $t1,$t5

div $t1,$t1,7
sb $t1,1($t0)

##
lw $t4,buffer
sw $t4,0($t6)

addi $t6,$t6,-4 #Decrementa para o prox pixel
addi $t7,$t7,-1 # Numero de vezes que o loop sera executado
beq $t7,$zero,prepara_blur

j blur
######################3



set_largura:
#trecho que configura a base do heap, em cada linha, para a impressao de pixels comecando sempre pela esquerda

	lw $t3,largura #tamanho da largura que servira de contagem de uma lateral a outra
	add $t2,$t2,$t3 #adiciona mais 2048 para ir para a base lateral esquerda acima
	move $t1, $s0 #recupera o endereço base do heap
	sub $t1,$t1,$t2 #base do heap - a base lateral = t1-t2. Base da lateral esquerda atual
	b leitura_imagem

abre_imagem:

	li $v0,13#Prepara $v0 para a syscall que abrirá a imagem
	li $a1, 0        #flags (0-leitura,1-escrita)
	la $a0,nome_da_imagem#t0 recebe o endereco de memoria do asciiz noma_da_imagem que será aberto
	syscall #realiza a leitura
	blt $v0,$zero,falha_leitura_imagem # O file descriptor e carregado em $v0. Se ocorreu erro durante a abertura do arquivo $v0<0 e é feito um jump 
	move $s2,$v0 #Se o arquivo foi aberto corretamente s0 recebe o file descriptor
	addi $s2,$s2,0
	##Preparaçcoes para a leitura_imagem
	
	move $a0, $s2     # file descriptor
	la $a1, buffer #local em que o pixel lido sera salvo
	li $a2 ,3 #determina a largura do buffer,ou seja, 3 caracteres serao lidos por vez
	lw $a3,screen_size#quantidade maxima de bits a serem lidos
	move $t1,$s0 #copia s0 pra t1.Agora t1 contem o endereco base do heap
	addi $t1,$t1,-2048 # aponta para a base lateral esquerda da ultima linha

	
	j leitura_imagem


leitura_imagem:#Uma vez que o arquvo foi aberto corretamente parte-se para a leitura 

# $a1,$a2,a3,$t1 definidos no abre_imagem serao utiliados aqui
# $a1 local em que o pixel lido sera salvo
# $a2 determina a largura do buffer,ou seja, 3 caracteres serao lidos por vez
# $a3 numero de bytes a serem lidos , se o arquivo possui 512x512 então serao 262144
# $t1 Contem o endereco base do heap

	li $v0,14 #Leitura do primeiro pixel da imagem e armazenamento no buffer,utiliza a1,a2 como argumentos
	syscall 
	
	lw $t0, 0($a1)		# le pixel recem armazenado no buffer e armazena no registrado temporario t0

	sw $t0, 0($t1)		# escreve o pixel recem lido no display na posicao t1
	addi $t1,$t1,4		# incrementa a posicao do heap
	addi $a3,$a3,-1		# decrementa a quantidade de bytes a serem lidos
	beq $a3,$zero,fecha_imagem # se todos os bytes a serem lidos ja foram lidos,exit
	addi $t3,$t3,-4		#decrementa a quantidade de posicoes da linha do heap
	beq $t3,$zero,set_largura# se a largura alcancou todas as posicoes da linha, set_largura
	  
	j leitura_imagem	# se ainda existe algum byte a ser lido ,ou seja, a3 != 0 , repete

fecha_imagem:
	# Fecha o arquivo
	li   $v0, 16       # valor para o syscall
	move $a0, $s2      # o file descriptor a ser fechado
	syscall            # fecha o arquivo
	jr $ra
	
falha_leitura_imagem:#Falha ao abrir a imagem
	li $v0,4
	la $a0,mensagem_erro_ao_abrir_imagem
	syscall
	jr $ra



exit:
jr $ra

quit:

li $v0,10
syscall
